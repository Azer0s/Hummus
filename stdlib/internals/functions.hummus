;; Copyright (c) Ariel Simulevski
;; Written by Ariel Simulevski <ariel@simulevski.at>

(use :<base>)

;; hummus/get-lib Pull and build a library to the
;;              local library folder
;; in:
;; * repo .. the repository URI of the library
;; * at .. the branch or tag name to pull
(def hummus/get-lib (fn repo at
  (--system-do-internals! :get-lib repo (string at))
))

;; hummus/run-project Run and include project
;; in:
;; * path .. Path to the project (absolute or relative)
(def hummus/run-project (fn path
  (--system-do-internals! :run-project path)
))

;; hummus/build-project Build a project
;; in:
;; * path .. Path to the project (absolute or relative)
(def hummus/build-project (fn path
  (--system-do-internals! :build-project path)
))

;; hummus/info Print the documentation of a function
;; [macro]
;; in:
;; * |func| .. the function name (as identifier)
(def hummus/info (macro |func|
  (--system-do-internals! :info (string (nth 1 func)))

  (' :int 0)
))

;; hummus/info-group Print the documentation of a function group
;; [macro]
;; in:
;; * |group| .. the group name (as identifier)
(def hummus/info-group (macro |group|
  (--system-do-internals! :info-group (string (nth 1 group)))

  (' :int 0)
))

;; hummus/info-ungrouped Print the documentation of all
;; functions not in a function group
(def hummus/info-ungrouped (fn
  (--system-do-internals! :info-ungrouped)
))

;; hummus/search-fn Fuzzy searches for a function
;; in:
;; * func .. the function to search for
(def hummus/search-fn (fn func
  (--system-do-internals! :search-fn func)
))