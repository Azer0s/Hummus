;; Copyright (c) Ariel Simulevski
;; Written by Ariel Simulevski <ariel@simulevski.at>

(use :<base/enumerable>)

;; map.. Takes in a function and returns a function that takes
;; in a list to apply `map` with the taken in function on
;; in:
;; * func/1 .. the `map` execution function
;; out: the mapper function
(def map.. (fn _func
  (fn x
    (map x _func)
  )
))

;; filter.. Takes in a function and returns a function that takes
;; in a list to apply `filter` with the taken in function on
;; in:
;; * func/1 .. the `filter` execution function
;; out: the filter function
(def filter.. (fn _func
  (fn x
    (filter x _func)
  )
))

;; reduce.. Takes in a function and an initial value and
;; returns a function that takes in a list to apply `reduce`
;; with the taken in function and initial value on
;; in:
;; * func/2 .. the `reduce` execution function
;; * init .. the initial value for `reduce`
;; out: the reducer function
(def reduce.. (fn _func init
  (fn x
    (reduce x _func init)
  )
))

;; each.. Takes in a function and returns a function that takes
;; in a list to apply `each` with the taken in function on
;; in:
;; * func/1 .. the `each` execution function
;; out: 0
(def each.. (fn _func
  (fn x
    (each x _func)
  )
))