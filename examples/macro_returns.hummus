(use :<base>)

(def returnCall (macro
  (' :call :out (' :string "Hello"))
))

(def returnIf (macro
  (' :if (' :bool true) (' :call :out (' :string "Hello")))
))

(def returnIdentifier (macro
  (' :identifier :x)
))


(def returnAtom (macro
  (' :atom :ok)
))


(def returnBool (macro
  (' :bool true)
))


(def returnInt (macro
  (' :int  10)
))

(def returnFloat (macro
  (' :float  10.1)
))

(def returnString (macro
  (' :string "Hello")
))

(def returnForIter (macro
  (' :for_iter (' :x (' :call :to (' :int 10))) (' :call :out (' :identifier :x)))
))

(def returnForLoop (macro
  (' :for_loop (' :bool true) (' :call :out (' :string "Hello")))
))

(def namespace (macro |prefix| |defines|
  (if (= (nth 0 defines) :call)
    (' :def (str/concat (string (nth 1 prefix)) "/" (string (nth 1 defines))) (nth 2 defines))

    (map defines (fn define
      (' :def (str/concat (string (nth 1 prefix)) "/" (string (nth 1 define))) (nth 2 define))
    ))
  )
))

(namespace test
  (foo (fn x
    (out x)
  ))
)

(namespace test
  (foo (fn
    (out "Hello")
  ))

  (bar (fn
    (out "Hello")
  ))
)

(test/foo)